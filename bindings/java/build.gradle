plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.psyne'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
}

// Native library building
task buildNative(type: Exec) {
    group = 'build'
    description = 'Build the native JNI library'
    
    def osName = System.getProperty("os.name").toLowerCase()
    def libName = osName.contains("windows") ? "psyne_jni.dll" : 
                  osName.contains("mac") ? "libpsyne_jni.dylib" : "libpsyne_jni.so"
    
    workingDir file('src/main/native')
    
    if (osName.contains("windows")) {
        commandLine 'cmd', '/c', 'cl', '/O2', '/MD', '/LD',
                    '/I', file('../../../../include'),
                    '/I', System.getenv('JAVA_HOME') + '/include',
                    '/I', System.getenv('JAVA_HOME') + '/include/win32',
                    'psyne_jni.cpp',
                    '/link', '/OUT:' + libName,
                    file('../../../../build/Release/psyne_c.lib')
    } else {
        def includes = [
            '-I' + file('../../../../include'),
            '-I' + System.getenv('JAVA_HOME') + '/include'
        ]
        
        if (osName.contains("mac")) {
            includes.add('-I' + System.getenv('JAVA_HOME') + '/include/darwin')
        } else {
            includes.add('-I' + System.getenv('JAVA_HOME') + '/include/linux')
        }
        
        commandLine 'g++', '-std=c++17', '-O3', '-fPIC', '-shared',
                    *includes,
                    'psyne_jni.cpp',
                    '-o', file("../../../native/${libName}"),
                    '-L' + file('../../../../build'),
                    '-lpsyne_c'
    }
    
    doFirst {
        file('../../../native').mkdirs()
    }
}

// Copy native libraries to resources
task copyNativeLibraries(type: Copy) {
    dependsOn buildNative
    from file('../../native')
    into file('src/main/resources/native')
}

processResources {
    dependsOn copyNativeLibraries
}

// Javadoc configuration
javadoc {
    options {
        encoding = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "Psyne Java Bindings API"
        docTitle = "Psyne Java Bindings ${version}"
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    }
}

// Publishing configuration
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = 'Psyne Java Bindings'
                description = 'Java bindings for the Psyne zero-copy messaging library'
                url = 'https://github.com/cognithive/psyne'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'psyne-team'
                        name = 'Psyne Development Team'
                        email = 'psyne@example.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/cognithive/psyne.git'
                    developerConnection = 'scm:git:ssh://github.com:cognithive/psyne.git'
                    url = 'https://github.com/cognithive/psyne'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'sonatype'
            url = version.endsWith('SNAPSHOT') ? 
                  'https://oss.sonatype.org/content/repositories/snapshots/' :
                  'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            
            credentials {
                username = project.findProperty('ossrhUsername') ?: ''
                password = project.findProperty('ossrhPassword') ?: ''
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
}

// Custom task to run examples
task runExample(type: JavaExec) {
    group = 'examples'
    description = 'Run a Psyne example'
    classpath = sourceSets.main.runtimeClasspath
    
    if (project.hasProperty('example')) {
        mainClass = "com.psyne.examples.${project.property('example')}"
    } else {
        mainClass = 'com.psyne.examples.BasicExample'
    }
    
    systemProperty 'java.library.path', file('../../native')
}