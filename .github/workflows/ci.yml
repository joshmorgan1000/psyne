name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  linux-gcc:
    name: Linux GCC
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gcc-version: [10, 11, 12, 13]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug directory structure
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Include directory:"
        ls -la include/
        echo "Tests directory:"
        ls -la tests/
    
    - name: Install GCC ${{ matrix.gcc-version }}
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.gcc-version }} g++-${{ matrix.gcc-version }} libeigen3-dev libboost-all-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc-version }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc-version }} 100
    
    - name: Verify compiler
      run: |
        gcc --version
        g++ --version
    
    - name: Build minimal test
      run: |
        echo "Testing basic include..."
        echo '#include "../include/psyne/core/behaviors.hpp"' > test.cpp
        echo '#include <iostream>' >> test.cpp
        echo 'int main() { std::cout << "OK\\n"; return 0; }' >> test.cpp
        g++ -std=c++20 -O3 -Wall -Wextra -pthread test.cpp -o test || exit 1
        ./test
        
    - name: Build tests
      run: |
        echo "Building tests..."
        echo "Building test_simple_channel..."
        g++ -std=c++20 -O3 -Wall -Wextra -pthread \
          tests/test_simple_channel.cpp -o test_simple_channel || exit 1
    
    - name: Build benchmarks
      run: |
        echo "Building benchmarks..."
        g++ -std=c++20 -O3 -march=native -pthread \
          benchmarks/quick_all_substrates.cpp -o quick_all_substrates
        g++ -std=c++20 -O3 -march=native -pthread \
          benchmarks/all_patterns_test.cpp -o all_patterns_test
        g++ -std=c++20 -O3 -march=native -pthread \
          benchmarks/quick_beast_test.cpp -o quick_beast_test
    
    - name: Build examples
      run: |
        echo "Building examples..."
        g++ -std=c++20 -O3 -Wall -Wextra -pthread \
          examples/behaviors_demo.cpp -o behaviors_demo
        g++ -std=c++20 -O3 -Wall -Wextra -pthread \
          examples/basic/ipc_example.cpp -o ipc_example
        g++ -std=c++20 -O3 -Wall -Wextra -pthread \
          examples/basic/tcp_example.cpp -o tcp_example
    
    - name: Run tests
      run: |
        echo "Running tests..."
        ./test_simple_channel
    
    - name: Run quick benchmarks
      run: |
        echo "Running quick benchmarks..."
        # Run only the quickest test
        ./quick_all_substrates

  linux-clang:
    name: Linux Clang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        clang-version: [12, 13, 14, 15, 16]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Clang ${{ matrix.clang-version }}
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ matrix.clang-version }}
        sudo apt-get install -y clang-${{ matrix.clang-version }} libboost-all-dev
    
    - name: Build tests
      run: |
        echo "Building tests with Clang..."
        clang++-${{ matrix.clang-version }} -std=c++20 -O3 -Wall -Wextra -pthread \
          tests/test_simple_channel.cpp -o test_simple_channel
    
    - name: Build benchmarks
      run: |
        echo "Building benchmarks with Clang..."
        clang++-${{ matrix.clang-version }} -std=c++20 -O3 -march=native -pthread \
          benchmarks/quick_all_substrates.cpp -o quick_all_substrates
    
    - name: Run tests
      run: |
        ./test_simple_channel

  macos:
    name: macOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: brew install eigen boost
    
    - name: Build tests
      run: |
        echo "Building tests on macOS..."
        c++ -std=c++20 -O3 -Wall -Wextra -pthread \
          tests/test_simple_channel.cpp -o test_simple_channel
    
    - name: Build benchmarks
      run: |
        echo "Building benchmarks on macOS..."
        c++ -std=c++20 -O3 -march=native -pthread \
          benchmarks/quick_all_substrates.cpp -o quick_all_substrates
    
    - name: Run tests
      run: |
        ./test_simple_channel
    
    - name: Run quick benchmarks
      run: |
        ./quick_all_substrates

  windows-msvc:
    name: Windows MSVC
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1
      
    - name: Setup vcpkg with cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
    
    - name: Install boost via vcpkg
      run: |
        vcpkg install boost-system:x64-windows boost-thread:x64-windows boost-chrono:x64-windows
    
    - name: Build tests
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        echo Building Windows test with boost...
        cl /std:c++20 /O2 /EHsc /I"%VCPKG_ROOT%\installed\x64-windows\include" tests/test_windows.cpp /Fe:test_windows.exe /link /LIBPATH:"%VCPKG_ROOT%\installed\x64-windows\lib"
    
    - name: Build simple test
      shell: cmd  
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        echo Building simple channel test...
        cl /std:c++20 /O2 /EHsc /I"%VCPKG_ROOT%\installed\x64-windows\include" tests/test_simple_channel.cpp /Fe:test_simple_channel.exe /link /LIBPATH:"%VCPKG_ROOT%\installed\x64-windows\lib"
    
    - name: Run tests
      shell: cmd
      run: |
        echo Running Windows test...
        test_windows.exe
        echo.
        echo Running simple channel test...
        test_simple_channel.exe

  header-only-validation:
    name: Header-Only Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-all-dev
    
    - name: Test single include compilation
      run: |
        echo '#include "psyne/psyne.hpp"' > test_include.cpp
        echo 'int main() { return 0; }' >> test_include.cpp
        g++ -std=c++20 -Wall -Wextra -Iinclude test_include.cpp -o test_include
        ./test_include
    
    - name: Check header guards
      run: |
        echo "Checking header guards..."
        for header in $(find include -name "*.hpp"); do
          if ! grep -q "#pragma once\|#ifndef.*#define" "$header"; then
            echo "Missing header guard in $header"
            exit 1
          fi
        done
    
    - name: Check no implementation files
      run: |
        if find include -name "*.cpp" | grep -q .; then
          echo "Found .cpp files in include directory!"
          exit 1
        fi

  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-all-dev
    
    - name: Build performance test
      run: |
        g++ -std=c++20 -O3 -march=native -pthread \
          benchmarks/quick_all_substrates.cpp -o perf_test
    
    - name: Run performance test
      run: |
        ./perf_test | tee performance_results.txt
    
    - name: Check performance thresholds
      run: |
        # Extract throughput from results
        if grep -q "SPSC + InProcess" performance_results.txt; then
          throughput=$(grep "SPSC + InProcess" performance_results.txt | grep -oE '[0-9]+' | head -1)
          echo "SPSC throughput: ${throughput} msgs/s"
          # Ensure we maintain at least 1M msgs/s
          if [ "$throughput" -lt 1000000 ]; then
            echo "Performance regression detected! Throughput below 1M msgs/s"
            exit 1
          fi
        fi
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_results.txt